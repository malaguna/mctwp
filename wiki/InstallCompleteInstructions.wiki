= Complete instructions =

INCOMPLETE

This instructions are checked with Ubuntu Server > 9.04. Ubuntu must be installed with minimal options. I like to avoid graphical environment in servers machines, but you could install it.

== Basic packages ==

Once Ubuntu is installed, make sure following packages are installed:

 * _autoconf_
 * _build-essential_
 * _libssl-dev_
 * _libapache2-mod-jk_
 * _openssh_
 * _sun-java6-jdk_
 * _postgresql_
 * _libpng12-dev_
 * _pkg-config_
 * _libglib2.0-dev_
 * _libgdk-pixbuf-dev_ 
 * _libgtk2.0-dev_

== Java configuration ==

 * Create shell script _/etc/profile.d/java.sh_ and make it runnable _chmod +x_. file must contain following
{{{
export JAVA_HOME=/usr/lib/jvm/java-6-sun
}}}

== Tomcat Installation ==

Tomcat installation is done with Apache APR. This increase Tomcat performance, but you can skip if found it difficult.

=== APR Installation ===

You can skip this if don't want APR.

 * Download and unpack _apr-1.3.X.tar.gz_ from [http://apr.apache.org/ APR home]
 * Get into uncompressed folder and run:
{{{
./configure --prefix=/usr/local/apr
}}}
 * then, run _make_, _make test_ and finally _sudo make install_.

=== Tomcat Installation ===

 * Download and unpack _apache-tomcat-6.0.X.tar.gz_ from [http://tomcat.apache.org/ Tomcat home].
 * Create a _tomcat_ user:
{{{
sudo adduser --no-create-home --disabled-login tomcat
}}}
 * Move uncompressed folder to _/opt_.
 * Create a soft link into _/opt_ called _tomcat_ that points to moved tomcat folder.
 * Create shell script _/etc/profile.d/tomcat.sh_ and make it runnable _chmod +x_ file must contain:
{{{
export CATALINA_HOME=/opt/tomcat
}}}

 * Create into folder _opt/tomcat/conf_ Following files:
   * tomcat-users.xml
{{{
<?xml version='1.0' encoding='utf-8'?>
<tomcat-users>
  <role rolename="manager"/>
  <user username="admin" password="inicial" roles="manager"/>
</tomcat-users>
}}}
   * jmxremote.access
{{{
monitorRole readonly
controlRole readonly
}}}
   * jmxremote.password
{{{
monitorRole inicial
controlRole inicial
}}}
 * Make tomcat user owner of all _/opt/tomcat_ content.

=== Installing tomcat as a system service ===

This can be avoided if you don't want to run tomcat as a system service.

 * Go to _/opt/tomcat/bin_.
 * Uncompress _tomcat-native.tar.gz_.
 * Go to _/opt/tomcat/bin/tomcat-native-1.1.4-src/jni/native_.
 * Run:
{{{
sudo ./configure --with-apr=/usr/local/apr/bin --with-java-home=/usr/lib/jvm/java-6-sun --with-ssl=no
sudo make
sudo make install
}}}
 * For older Ubuntu versions, it is necessary to change file _/etc/modprobe.d/aliases_ switching alias _net-pf-10_ off.

 * Download and unpack _commons-daemon-1.X.X.tar.gz_ from Aapche commons.
 * Move file _/home/admon/programas/commons-daemon-1.0.1/bin/jsvc.tar.gz_ to _/opt/tomcat/bin_.
 * Go to _/opt/tomcat/bin_.
 * Uncompress _jsvc.tar.gz_ go to this new folder.
 * Run:
{{{
sudo autoconf
sudo ./configure --with-java=/usr/lib/jvm/java-6-sun
sudo make
cp jsvc ..
}}}
 
 * Copy into _/opt/tomcat_ shell script *TODO: upload to SVN tomcat service script*.
 * Create a soft link into _/etc/init.d_ called _tomcat_ that points to _/opt/tomcat/tomcat.sh_
 * Setup as a system service script:
{{{
sudo update-rc.d tomcat defaults
}}}

== Configuring AJP ==

AJP is a protocol that makes possible to use Apache and Tomcat work together. However it is possible to use Tomcat without Apache, although I prefer to use Apache because of autentication realms.

You can use this configuration to run Apache and Tomcat in different machines, but you will have to change some properties.

If you don't want to use AJP, you need to configure user autentication into Tomcat.

 * Configure _!ServerName_ directive into _/etc/apache2/httpd.conf_ defining server name.
 * Change content of _/etc/libapache2-mod-jk/workers.properties_ to:
{{{
ps=/
worker.list=worker
worker.worker.type=ajp13
worker.worker.host=localhost
worker.worker.port=8009
worker.worker.mount=/mctwp /mctwp/*
}}}
 * Create file _/etc/apache2/mods-available/jk.conf_ with following content:
{{{
#Ubicacion del fichero workers.properties
JkWorkersFile /etc/libapache2-mod-jk/workers.properties

#Ubicaci√≥n del log
JkLogFile /var/log/apache2/mod_jk.log

#Nivel de logeo
JkLogLevel info

#Formato de logeo
JkLogStampFormat "[%a %b %d %H:%M:%S %Y] "

#Opciones
JkOptions +ForwardKeySize +ForwardURICompat -ForwardDirectories

#Formato de logeo
JkRequestLogFormat "%w %V %T"
}}}
 * Run:
{{{
sudo a2dismod jk
sudo a2enmod jk
}}}

=== Apache credentials ===

You can configure Apache to check user credentials several ways. Here it is the easiest one: to use a local file:

 * Create into _/etc/apache2_ an Apache password file called _passwd.txt_, using _htpasswd -c_ command.
 * Add to Apache default site configuration file _/etc/apache2/sites-available/default_, following directive:
{{{
    <Location "/mctwp">
        AuthType basic
        AuthName "mctwp"
        # Validacion contra fichero htpasswd.txt
        AuthUserFile "/etc/apache2/passwd.txt"
        Require valid-user
    </Location>

    <LocationMatch "/mctwp/jsp/research/upload/processUpload.jsp">
        Satisfy any
    </LocationMatch>
}}}
 * Add following attribute _tomcatAuthentication="false"_ to AJP connector node of configuration file _/opt/tomcat/conf/server.xml_.
 * Reload Apache and Tomcat:
{{{
sudo /etc/init.d/apache2 restart
sudo /etc/init.d/tomcat stop
sudo /etc/init.d/tomcat start
}}}

== eXist Installation ==

It is described [InstalleXist here].

== PostgreSQL configuration ==

 * Create a new postgres user called _admon_ and use it to run data base configuration script.
{{{
sudo su - postgres
createuser admon
createdb mctwp
psql -d mctwp -f schema.sql
psql -d mctwp -f configuration.sql

NOTE: If mctwp BBDD exists, you can drop it with dropdb.
}}}
 * Configure _/etc/postgresql/8.3/main/pg_hba.conf_ properly, following is an untrust configuration, but you can use to test:
{{{
local   all         all                              trust
host    all         all         127.0.0.1/32         trust
}}}

== Image Storage ==

 * User _tomcat_ must own the folder you create to store images.

== Instalar !XmedCon ==

Ubuntu has (X)!MedCon into software repositories, but if you prefer last version, or your distribution doesn't have this package, here you got how to build:

 * Download and unpack _xmedcon-0.10.4.tar.bz2_ from [http://xmedcon.sourceforge.net/ (X)!MedCon page].
 * Go to uncompressed folder and run:
{{{
./configure
make
sudo make install
}}}

== Reboot machine ==

Reboot machine and check all is OK.